
freeRtosPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000278c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800289c  0800289c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800289c  0800289c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800289c  0800289c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff8  20000010  080028b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001008  080028b4  00021008  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000981e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e56  00000000  00000000  00029856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebd3  00000000  00000000  0002cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca5  00000000  00000000  0003b86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005897b  00000000  00000000  00047510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009fe8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a4  00000000  00000000  0009fedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002834 	.word	0x08002834

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002834 	.word	0x08002834

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <LED1Task>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED1Task( void *pvParametrs ) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	for( ;; ) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <LED1Task+0x24>)
 800025e:	0019      	movs	r1, r3
 8000260:	0010      	movs	r0, r2
 8000262:	f000 fc78 	bl	8000b56 <HAL_GPIO_TogglePin>

		HAL_Delay(500);
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fa14 	bl	8000698 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000270:	e7f2      	b.n	8000258 <LED1Task+0x8>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	48000800 	.word	0x48000800

08000278 <LED2Task>:
	}
	vTaskDelete( NULL );
}

void LED2Task( void *pvParametrs ) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	for( ;; ) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <LED2Task+0x24>)
 8000286:	0019      	movs	r1, r3
 8000288:	0010      	movs	r0, r2
 800028a:	f000 fc64 	bl	8000b56 <HAL_GPIO_TogglePin>

		HAL_Delay(800);
 800028e:	23c8      	movs	r3, #200	; 0xc8
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fa00 	bl	8000698 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000298:	e7f2      	b.n	8000280 <LED2Task+0x8>
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	48000800 	.word	0x48000800

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 f9c7 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f821 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f85f 	bl	8000370 <MX_GPIO_Init>
 // osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   	xTaskCreate( LED1Task, "Task1", 128, NULL, 2, NULL );
 80002b2:	490b      	ldr	r1, [pc, #44]	; (80002e0 <main+0x40>)
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <main+0x44>)
 80002b6:	2300      	movs	r3, #0
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2302      	movs	r3, #2
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	f001 fbcb 	bl	8001a5c <xTaskCreate>

  	xTaskCreate( LED2Task, "Task2", 128, NULL, 2, NULL );
 80002c6:	4908      	ldr	r1, [pc, #32]	; (80002e8 <main+0x48>)
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x4c>)
 80002ca:	2300      	movs	r3, #0
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2302      	movs	r3, #2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2300      	movs	r3, #0
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	f001 fbc1 	bl	8001a5c <xTaskCreate>

   	vTaskStartScheduler();
 80002da:	f001 fce9 	bl	8001cb0 <vTaskStartScheduler>
  while (1)
 80002de:	e7fe      	b.n	80002de <main+0x3e>
 80002e0:	0800284c 	.word	0x0800284c
 80002e4:	08000251 	.word	0x08000251
 80002e8:	08002854 	.word	0x08002854
 80002ec:	08000279 	.word	0x08000279

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b091      	sub	sp, #68	; 0x44
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2410      	movs	r4, #16
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2330      	movs	r3, #48	; 0x30
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fa8f 	bl	8002824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	2310      	movs	r3, #16
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fa88 	bl	8002824 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	0021      	movs	r1, r4
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2201      	movs	r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2210      	movs	r2, #16
 8000326:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	187b      	adds	r3, r7, r1
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fc2b 	bl	8000b8c <HAL_RCC_OscConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800033a:	f000 f885 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	003b      	movs	r3, r7
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000356:	003b      	movs	r3, r7
 8000358:	2100      	movs	r1, #0
 800035a:	0018      	movs	r0, r3
 800035c:	f000 ff30 	bl	80011c0 <HAL_RCC_ClockConfig>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000364:	f000 f870 	bl	8000448 <Error_Handler>
  }
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	b011      	add	sp, #68	; 0x44
 800036e:	bd90      	pop	{r4, r7, pc}

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	240c      	movs	r4, #12
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	2314      	movs	r3, #20
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 fa4f 	bl	8002824 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b25      	ldr	r3, [pc, #148]	; (800041c <MX_GPIO_Init+0xac>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <MX_GPIO_Init+0xac>)
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	0289      	lsls	r1, r1, #10
 8000390:	430a      	orrs	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <MX_GPIO_Init+0xac>)
 8000396:	695a      	ldr	r2, [r3, #20]
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	029b      	lsls	r3, r3, #10
 800039c:	4013      	ands	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_GPIO_Init+0xac>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b1d      	ldr	r3, [pc, #116]	; (800041c <MX_GPIO_Init+0xac>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0309      	lsls	r1, r1, #12
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_GPIO_Init+0xac>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	031b      	lsls	r3, r3, #12
 80003b8:	4013      	ands	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003be:	23c0      	movs	r3, #192	; 0xc0
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4817      	ldr	r0, [pc, #92]	; (8000420 <MX_GPIO_Init+0xb0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	0019      	movs	r1, r3
 80003c8:	f000 fba8 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2202      	movs	r2, #2
 80003dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003de:	193a      	adds	r2, r7, r4
 80003e0:	2390      	movs	r3, #144	; 0x90
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fa28 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003ec:	0021      	movs	r1, r4
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	22c0      	movs	r2, #192	; 0xc0
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2201      	movs	r2, #1
 80003fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000408:	187b      	adds	r3, r7, r1
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <MX_GPIO_Init+0xb0>)
 800040c:	0019      	movs	r1, r3
 800040e:	0010      	movs	r0, r2
 8000410:	f000 fa14 	bl	800083c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b009      	add	sp, #36	; 0x24
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d101      	bne.n	800043a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000436:	f000 f913 	bl	8000660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40012c00 	.word	0x40012c00

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_MspInit+0x50>)
 800045c:	699a      	ldr	r2, [r3, #24]
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <HAL_MspInit+0x50>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x50>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x50>)
 8000474:	69da      	ldr	r2, [r3, #28]
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <HAL_MspInit+0x50>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0549      	lsls	r1, r1, #21
 800047c:	430a      	orrs	r2, r1
 800047e:	61da      	str	r2, [r3, #28]
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_MspInit+0x50>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	055b      	lsls	r3, r3, #21
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800048e:	2302      	movs	r3, #2
 8000490:	425b      	negs	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	2103      	movs	r1, #3
 8000496:	0018      	movs	r0, r3
 8000498:	f000 f9aa 	bl	80007f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004b8:	4b38      	ldr	r3, [pc, #224]	; (800059c <HAL_InitTick+0xf4>)
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	4b37      	ldr	r3, [pc, #220]	; (800059c <HAL_InitTick+0xf4>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0109      	lsls	r1, r1, #4
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <HAL_InitTick+0xf4>)
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	4013      	ands	r3, r2
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d4:	230c      	movs	r3, #12
 80004d6:	18fa      	adds	r2, r7, r3
 80004d8:	2410      	movs	r4, #16
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 ffc0 	bl	8001464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d104      	bne.n	80004fa <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004f0:	f000 ffa2 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 80004f4:	0003      	movs	r3, r0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f8:	e004      	b.n	8000504 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004fa:	f000 ff9d 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 80004fe:	0003      	movs	r3, r0
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000506:	4926      	ldr	r1, [pc, #152]	; (80005a0 <HAL_InitTick+0xf8>)
 8000508:	0018      	movs	r0, r3
 800050a:	f7ff fdfd 	bl	8000108 <__udivsi3>
 800050e:	0003      	movs	r3, r0
 8000510:	3b01      	subs	r3, #1
 8000512:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <HAL_InitTick+0xfc>)
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <HAL_InitTick+0x100>)
 8000518:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <HAL_InitTick+0xfc>)
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <HAL_InitTick+0x104>)
 800051e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <HAL_InitTick+0xfc>)
 8000522:	6a3a      	ldr	r2, [r7, #32]
 8000524:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <HAL_InitTick+0xfc>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_InitTick+0xfc>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <HAL_InitTick+0xfc>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000538:	252b      	movs	r5, #43	; 0x2b
 800053a:	197c      	adds	r4, r7, r5
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <HAL_InitTick+0xfc>)
 800053e:	0018      	movs	r0, r3
 8000540:	f000 ffba 	bl	80014b8 <HAL_TIM_Base_Init>
 8000544:	0003      	movs	r3, r0
 8000546:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000548:	197b      	adds	r3, r7, r5
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d11e      	bne.n	800058e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000550:	197c      	adds	r4, r7, r5
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <HAL_InitTick+0xfc>)
 8000554:	0018      	movs	r0, r3
 8000556:	f000 ffe3 	bl	8001520 <HAL_TIM_Base_Start_IT>
 800055a:	0003      	movs	r3, r0
 800055c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800055e:	197b      	adds	r3, r7, r5
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d113      	bne.n	800058e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000566:	200d      	movs	r0, #13
 8000568:	f000 f957 	bl	800081a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b03      	cmp	r3, #3
 8000570:	d809      	bhi.n	8000586 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	0019      	movs	r1, r3
 8000578:	200d      	movs	r0, #13
 800057a:	f000 f939 	bl	80007f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_InitTick+0x108>)
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	e003      	b.n	800058e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000586:	232b      	movs	r3, #43	; 0x2b
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800058e:	232b      	movs	r3, #43	; 0x2b
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	781b      	ldrb	r3, [r3, #0]
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	b00c      	add	sp, #48	; 0x30
 800059a:	bdb0      	pop	{r4, r5, r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	000f4240 	.word	0x000f4240
 80005a4:	20000280 	.word	0x20000280
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	000003e7 	.word	0x000003e7
 80005b0:	20000004 	.word	0x20000004

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 ffcc 	bl	8001564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000280 	.word	0x20000280

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490e      	ldr	r1, [pc, #56]	; (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0b      	ldr	r4, [pc, #44]	; (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800060e:	f7ff ffe3 	bl	80005d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000612:	f002 f8e3 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe43 	bl	80002a0 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000628:	080028a4 	.word	0x080028a4
  ldr r2, =_sbss
 800062c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000630:	20001008 	.word	0x20001008

08000634 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_COMP_IRQHandler>
	...

08000638 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_Init+0x24>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_Init+0x24>)
 8000642:	2110      	movs	r1, #16
 8000644:	430a      	orrs	r2, r1
 8000646:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000648:	2003      	movs	r0, #3
 800064a:	f7ff ff2d 	bl	80004a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064e:	f7ff ff01 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
}
 8000654:	0018      	movs	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	001a      	movs	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	18d2      	adds	r2, r2, r3
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_IncTick+0x20>)
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000008 	.word	0x20000008
 8000680:	200002c0 	.word	0x200002c0

08000684 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	200002c0 	.word	0x200002c0

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a0:	f7ff fff0 	bl	8000684 <HAL_GetTick>
 80006a4:	0003      	movs	r3, r0
 80006a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	d005      	beq.n	80006be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_Delay+0x44>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	189b      	adds	r3, r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	f7ff ffe0 	bl	8000684 <HAL_GetTick>
 80006c4:	0002      	movs	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d8f7      	bhi.n	80006c0 <HAL_Delay+0x28>
  {
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b004      	add	sp, #16
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000008 	.word	0x20000008

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b7f      	cmp	r3, #127	; 0x7f
 80006f2:	d809      	bhi.n	8000708 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	231f      	movs	r3, #31
 80006fc:	401a      	ands	r2, r3
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_EnableIRQ+0x30>)
 8000700:	2101      	movs	r1, #1
 8000702:	4091      	lsls	r1, r2
 8000704:	000a      	movs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
  }
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b7f      	cmp	r3, #127	; 0x7f
 8000728:	d828      	bhi.n	800077c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072a:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <__NVIC_SetPriority+0xd4>)
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	33c0      	adds	r3, #192	; 0xc0
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	589b      	ldr	r3, [r3, r2]
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	0011      	movs	r1, r2
 8000740:	2203      	movs	r2, #3
 8000742:	400a      	ands	r2, r1
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	21ff      	movs	r1, #255	; 0xff
 8000748:	4091      	lsls	r1, r2
 800074a:	000a      	movs	r2, r1
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	401a      	ands	r2, r3
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	0018      	movs	r0, r3
 8000760:	2303      	movs	r3, #3
 8000762:	4003      	ands	r3, r0
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000768:	481f      	ldr	r0, [pc, #124]	; (80007e8 <__NVIC_SetPriority+0xd4>)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b25b      	sxtb	r3, r3
 8000770:	089b      	lsrs	r3, r3, #2
 8000772:	430a      	orrs	r2, r1
 8000774:	33c0      	adds	r3, #192	; 0xc0
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800077a:	e031      	b.n	80007e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <__NVIC_SetPriority+0xd8>)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	230f      	movs	r3, #15
 8000786:	400b      	ands	r3, r1
 8000788:	3b08      	subs	r3, #8
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	3306      	adds	r3, #6
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	3304      	adds	r3, #4
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	0011      	movs	r1, r2
 800079c:	2203      	movs	r2, #3
 800079e:	400a      	ands	r2, r1
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	21ff      	movs	r1, #255	; 0xff
 80007a4:	4091      	lsls	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	401a      	ands	r2, r3
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	4003      	ands	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	001c      	movs	r4, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	4023      	ands	r3, r4
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	430a      	orrs	r2, r1
 80007d6:	3306      	adds	r3, #6
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	18c3      	adds	r3, r0, r3
 80007dc:	3304      	adds	r3, #4
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b003      	add	sp, #12
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	210f      	movs	r1, #15
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	1c02      	adds	r2, r0, #0
 8000800:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	187b      	adds	r3, r7, r1
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b25b      	sxtb	r3, r3
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ff81 	bl	8000714 <__NVIC_SetPriority>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b004      	add	sp, #16
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	0002      	movs	r2, r0
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b25b      	sxtb	r3, r3
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff ff57 	bl	80006e0 <__NVIC_EnableIRQ>
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e14f      	b.n	8000aec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2101      	movs	r1, #1
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4091      	lsls	r1, r2
 8000856:	000a      	movs	r2, r1
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <HAL_GPIO_Init+0x28>
 8000862:	e140      	b.n	8000ae6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d003      	beq.n	8000874 <HAL_GPIO_Init+0x38>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b12      	cmp	r3, #18
 8000872:	d123      	bne.n	80008bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	08da      	lsrs	r2, r3, #3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3208      	adds	r2, #8
 800087c:	0092      	lsls	r2, r2, #2
 800087e:	58d3      	ldr	r3, [r2, r3]
 8000880:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2207      	movs	r2, #7
 8000886:	4013      	ands	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	409a      	lsls	r2, r3
 800088e:	0013      	movs	r3, r2
 8000890:	43da      	mvns	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	691a      	ldr	r2, [r3, #16]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2107      	movs	r1, #7
 80008a0:	400b      	ands	r3, r1
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	409a      	lsls	r2, r3
 80008a6:	0013      	movs	r3, r2
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	6939      	ldr	r1, [r7, #16]
 80008ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2203      	movs	r2, #3
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00b      	beq.n	8000910 <HAL_GPIO_Init+0xd4>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d007      	beq.n	8000910 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	2b11      	cmp	r3, #17
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	409a      	lsls	r2, r3
 8000932:	0013      	movs	r3, r2
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	43da      	mvns	r2, r3
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	2201      	movs	r2, #1
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	43da      	mvns	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	055b      	lsls	r3, r3, #21
 80009aa:	4013      	ands	r3, r2
 80009ac:	d100      	bne.n	80009b0 <HAL_GPIO_Init+0x174>
 80009ae:	e09a      	b.n	8000ae6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b0:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <HAL_GPIO_Init+0x2c8>)
 80009b2:	699a      	ldr	r2, [r3, #24]
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <HAL_GPIO_Init+0x2c8>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	430a      	orrs	r2, r1
 80009ba:	619a      	str	r2, [r3, #24]
 80009bc:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <HAL_GPIO_Init+0x2c8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4013      	ands	r3, r2
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c8:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <HAL_GPIO_Init+0x2cc>)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	589b      	ldr	r3, [r3, r2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2203      	movs	r2, #3
 80009da:	4013      	ands	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	409a      	lsls	r2, r3
 80009e2:	0013      	movs	r3, r2
 80009e4:	43da      	mvns	r2, r3
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	2390      	movs	r3, #144	; 0x90
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x1e2>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a44      	ldr	r2, [pc, #272]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x1de>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a43      	ldr	r2, [pc, #268]	; (8000b10 <HAL_GPIO_Init+0x2d4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x1da>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <HAL_GPIO_Init+0x2d8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x1d6>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x1e4>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x1e4>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x1e4>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x1e4>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	2103      	movs	r1, #3
 8000a24:	400a      	ands	r2, r1
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a30:	4935      	ldr	r1, [pc, #212]	; (8000b08 <HAL_GPIO_Init+0x2cc>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	4013      	ands	r3, r2
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43da      	mvns	r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	035b      	lsls	r3, r3, #13
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	039b      	lsls	r3, r3, #14
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	40da      	lsrs	r2, r3
 8000af4:	1e13      	subs	r3, r2, #0
 8000af6:	d000      	beq.n	8000afa <HAL_GPIO_Init+0x2be>
 8000af8:	e6a8      	b.n	800084c <HAL_GPIO_Init+0x10>
  } 
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b006      	add	sp, #24
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000c00 	.word	0x48000c00
 8000b18:	40010400 	.word	0x40010400

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	0008      	movs	r0, r1
 8000b26:	0011      	movs	r1, r2
 8000b28:	1cbb      	adds	r3, r7, #2
 8000b2a:	1c02      	adds	r2, r0, #0
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	1c7b      	adds	r3, r7, #1
 8000b30:	1c0a      	adds	r2, r1, #0
 8000b32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b34:	1c7b      	adds	r3, r7, #1
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3c:	1cbb      	adds	r3, r7, #2
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b44:	e003      	b.n	8000b4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b46:	1cbb      	adds	r3, r7, #2
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	000a      	movs	r2, r1
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	1cba      	adds	r2, r7, #2
 8000b6a:	8812      	ldrh	r2, [r2, #0]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d005      	beq.n	8000b7c <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b70:	1cbb      	adds	r3, r7, #2
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b7a:	e003      	b.n	8000b84 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7c:	1cbb      	adds	r3, r7, #2
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e301      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d100      	bne.n	8000baa <HAL_RCC_OscConfig+0x1e>
 8000ba8:	e08d      	b.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000baa:	4bc3      	ldr	r3, [pc, #780]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	220c      	movs	r2, #12
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d00e      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb6:	4bc0      	ldr	r3, [pc, #768]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	220c      	movs	r2, #12
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d116      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x64>
 8000bc2:	4bbd      	ldr	r3, [pc, #756]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	401a      	ands	r2, r3
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	025b      	lsls	r3, r3, #9
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d10d      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd4:	4bb8      	ldr	r3, [pc, #736]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d100      	bne.n	8000be2 <HAL_RCC_OscConfig+0x56>
 8000be0:	e070      	b.n	8000cc4 <HAL_RCC_OscConfig+0x138>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d000      	beq.n	8000bec <HAL_RCC_OscConfig+0x60>
 8000bea:	e06b      	b.n	8000cc4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e2d8      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d107      	bne.n	8000c08 <HAL_RCC_OscConfig+0x7c>
 8000bf8:	4baf      	ldr	r3, [pc, #700]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4bae      	ldr	r3, [pc, #696]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	0249      	lsls	r1, r1, #9
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e02f      	b.n	8000c68 <HAL_RCC_OscConfig+0xdc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10c      	bne.n	8000c2a <HAL_RCC_OscConfig+0x9e>
 8000c10:	4ba9      	ldr	r3, [pc, #676]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4ba8      	ldr	r3, [pc, #672]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c16:	49a9      	ldr	r1, [pc, #676]	; (8000ebc <HAL_RCC_OscConfig+0x330>)
 8000c18:	400a      	ands	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	4ba6      	ldr	r3, [pc, #664]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4ba5      	ldr	r3, [pc, #660]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c22:	49a7      	ldr	r1, [pc, #668]	; (8000ec0 <HAL_RCC_OscConfig+0x334>)
 8000c24:	400a      	ands	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	e01e      	b.n	8000c68 <HAL_RCC_OscConfig+0xdc>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d10e      	bne.n	8000c50 <HAL_RCC_OscConfig+0xc4>
 8000c32:	4ba1      	ldr	r3, [pc, #644]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4ba0      	ldr	r3, [pc, #640]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	02c9      	lsls	r1, r1, #11
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	4b9d      	ldr	r3, [pc, #628]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b9c      	ldr	r3, [pc, #624]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	0249      	lsls	r1, r1, #9
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xdc>
 8000c50:	4b99      	ldr	r3, [pc, #612]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b98      	ldr	r3, [pc, #608]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c56:	4999      	ldr	r1, [pc, #612]	; (8000ebc <HAL_RCC_OscConfig+0x330>)
 8000c58:	400a      	ands	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	4b96      	ldr	r3, [pc, #600]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b95      	ldr	r3, [pc, #596]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c62:	4997      	ldr	r1, [pc, #604]	; (8000ec0 <HAL_RCC_OscConfig+0x334>)
 8000c64:	400a      	ands	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d014      	beq.n	8000c9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd08 	bl	8000684 <HAL_GetTick>
 8000c74:	0003      	movs	r3, r0
 8000c76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7a:	f7ff fd03 	bl	8000684 <HAL_GetTick>
 8000c7e:	0002      	movs	r2, r0
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b64      	cmp	r3, #100	; 0x64
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e28a      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8c:	4b8a      	ldr	r3, [pc, #552]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	d0f0      	beq.n	8000c7a <HAL_RCC_OscConfig+0xee>
 8000c98:	e015      	b.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fcf3 	bl	8000684 <HAL_GetTick>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fcee 	bl	8000684 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e275      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	4b80      	ldr	r3, [pc, #512]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	029b      	lsls	r3, r3, #10
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x118>
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x146>
 8000cd0:	e069      	b.n	8000da6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cd2:	4b79      	ldr	r3, [pc, #484]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d00b      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cdc:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d11c      	bne.n	8000d22 <HAL_RCC_OscConfig+0x196>
 8000ce8:	4b73      	ldr	r3, [pc, #460]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	025b      	lsls	r3, r3, #9
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d116      	bne.n	8000d22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf4:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e24b      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	22f8      	movs	r2, #248	; 0xf8
 8000d10:	4393      	bics	r3, r2
 8000d12:	0019      	movs	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	00da      	lsls	r2, r3, #3
 8000d1a:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d20:	e041      	b.n	8000da6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d024      	beq.n	8000d74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2a:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fca5 	bl	8000684 <HAL_GetTick>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fca0 	bl	8000684 <HAL_GetTick>
 8000d44:	0002      	movs	r2, r0
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e227      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2202      	movs	r2, #2
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d0f1      	beq.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5c:	4b56      	ldr	r3, [pc, #344]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	22f8      	movs	r2, #248	; 0xf8
 8000d62:	4393      	bics	r3, r2
 8000d64:	0019      	movs	r1, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	00da      	lsls	r2, r3, #3
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e018      	b.n	8000da6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d74:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc80 	bl	8000684 <HAL_GetTick>
 8000d84:	0003      	movs	r3, r0
 8000d86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc7b 	bl	8000684 <HAL_GetTick>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e202      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2202      	movs	r2, #2
 8000da2:	4013      	ands	r3, r2
 8000da4:	d1f1      	bne.n	8000d8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2208      	movs	r2, #8
 8000dac:	4013      	ands	r3, r2
 8000dae:	d036      	beq.n	8000e1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d019      	beq.n	8000dec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db8:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fc5e 	bl	8000684 <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc59 	bl	8000684 <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1e0      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	d0f1      	beq.n	8000dce <HAL_RCC_OscConfig+0x242>
 8000dea:	e018      	b.n	8000e1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	438a      	bics	r2, r1
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fc44 	bl	8000684 <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e02:	f7ff fc3f 	bl	8000684 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e1c6      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	2202      	movs	r2, #2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d1f1      	bne.n	8000e02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2204      	movs	r2, #4
 8000e24:	4013      	ands	r3, r2
 8000e26:	d100      	bne.n	8000e2a <HAL_RCC_OscConfig+0x29e>
 8000e28:	e0b4      	b.n	8000f94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	201f      	movs	r0, #31
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000e34:	69da      	ldr	r2, [r3, #28]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	055b      	lsls	r3, r3, #21
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d110      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000e40:	69da      	ldr	r2, [r3, #28]
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0549      	lsls	r1, r1, #21
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	61da      	str	r2, [r3, #28]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	055b      	lsls	r3, r3, #21
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e5a:	183b      	adds	r3, r7, r0
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d11a      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_RCC_OscConfig+0x338>)
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0049      	lsls	r1, r1, #1
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fc03 	bl	8000684 <HAL_GetTick>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e84:	f7ff fbfe 	bl	8000684 <HAL_GetTick>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e185      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_RCC_OscConfig+0x338>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x33c>
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	621a      	str	r2, [r3, #32]
 8000eb6:	e035      	b.n	8000f24 <HAL_RCC_OscConfig+0x398>
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	fffeffff 	.word	0xfffeffff
 8000ec0:	fffbffff 	.word	0xfffbffff
 8000ec4:	40007000 	.word	0x40007000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x35e>
 8000ed0:	4bb6      	ldr	r3, [pc, #728]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	4bb5      	ldr	r3, [pc, #724]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	438a      	bics	r2, r1
 8000eda:	621a      	str	r2, [r3, #32]
 8000edc:	4bb3      	ldr	r3, [pc, #716]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ede:	6a1a      	ldr	r2, [r3, #32]
 8000ee0:	4bb2      	ldr	r3, [pc, #712]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	621a      	str	r2, [r3, #32]
 8000ee8:	e01c      	b.n	8000f24 <HAL_RCC_OscConfig+0x398>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x380>
 8000ef2:	4bae      	ldr	r3, [pc, #696]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	4bad      	ldr	r3, [pc, #692]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ef8:	2104      	movs	r1, #4
 8000efa:	430a      	orrs	r2, r1
 8000efc:	621a      	str	r2, [r3, #32]
 8000efe:	4bab      	ldr	r3, [pc, #684]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	4baa      	ldr	r3, [pc, #680]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	621a      	str	r2, [r3, #32]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0x398>
 8000f0c:	4ba7      	ldr	r3, [pc, #668]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	4ba6      	ldr	r3, [pc, #664]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	438a      	bics	r2, r1
 8000f16:	621a      	str	r2, [r3, #32]
 8000f18:	4ba4      	ldr	r3, [pc, #656]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	4ba3      	ldr	r3, [pc, #652]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f1e:	2104      	movs	r1, #4
 8000f20:	438a      	bics	r2, r1
 8000f22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d014      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fbaa 	bl	8000684 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e009      	b.n	8000f4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fba5 	bl	8000684 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a9b      	ldr	r2, [pc, #620]	; (80011b0 <HAL_RCC_OscConfig+0x624>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e12b      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4a:	4b98      	ldr	r3, [pc, #608]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3aa>
 8000f54:	e013      	b.n	8000f7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb95 	bl	8000684 <HAL_GetTick>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5e:	e009      	b.n	8000f74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f7ff fb90 	bl	8000684 <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4a91      	ldr	r2, [pc, #580]	; (80011b0 <HAL_RCC_OscConfig+0x624>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e116      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	4b8d      	ldr	r3, [pc, #564]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f7e:	231f      	movs	r3, #31
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d105      	bne.n	8000f94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f88:	4b88      	ldr	r3, [pc, #544]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	4b87      	ldr	r3, [pc, #540]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000f8e:	4989      	ldr	r1, [pc, #548]	; (80011b4 <HAL_RCC_OscConfig+0x628>)
 8000f90:	400a      	ands	r2, r1
 8000f92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2210      	movs	r2, #16
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d063      	beq.n	8001066 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d12a      	bne.n	8000ffc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fa6:	4b81      	ldr	r3, [pc, #516]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000faa:	4b80      	ldr	r3, [pc, #512]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fac:	2104      	movs	r1, #4
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fb2:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb6:	4b7d      	ldr	r3, [pc, #500]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb61 	bl	8000684 <HAL_GetTick>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fc8:	f7ff fb5c 	bl	8000684 <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e0e3      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fda:	4b74      	ldr	r3, [pc, #464]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d0f1      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fe4:	4b71      	ldr	r3, [pc, #452]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	22f8      	movs	r2, #248	; 0xf8
 8000fea:	4393      	bics	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	00da      	lsls	r2, r3, #3
 8000ff4:	4b6d      	ldr	r3, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffa:	e034      	b.n	8001066 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	3305      	adds	r3, #5
 8001002:	d111      	bne.n	8001028 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001004:	4b69      	ldr	r3, [pc, #420]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800100a:	2104      	movs	r1, #4
 800100c:	438a      	bics	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001014:	22f8      	movs	r2, #248	; 0xf8
 8001016:	4393      	bics	r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	00da      	lsls	r2, r3, #3
 8001020:	4b62      	ldr	r3, [pc, #392]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
 8001026:	e01e      	b.n	8001066 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001028:	4b60      	ldr	r3, [pc, #384]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	4b5f      	ldr	r3, [pc, #380]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800102e:	2104      	movs	r1, #4
 8001030:	430a      	orrs	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001034:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800103a:	2101      	movs	r1, #1
 800103c:	438a      	bics	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fb20 	bl	8000684 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800104a:	f7ff fb1b 	bl	8000684 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0a2      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d1f1      	bne.n	800104a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <HAL_RCC_OscConfig+0x4e4>
 800106e:	e097      	b.n	80011a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001070:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	220c      	movs	r2, #12
 8001076:	4013      	ands	r3, r2
 8001078:	2b08      	cmp	r3, #8
 800107a:	d100      	bne.n	800107e <HAL_RCC_OscConfig+0x4f2>
 800107c:	e06b      	b.n	8001156 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d14c      	bne.n	8001120 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001086:	4b49      	ldr	r3, [pc, #292]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800108c:	494a      	ldr	r1, [pc, #296]	; (80011b8 <HAL_RCC_OscConfig+0x62c>)
 800108e:	400a      	ands	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff faf7 	bl	8000684 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff faf2 	bl	8000684 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e079      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	049b      	lsls	r3, r3, #18
 80010b6:	4013      	ands	r3, r2
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ba:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	220f      	movs	r2, #15
 80010c0:	4393      	bics	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010ca:	430a      	orrs	r2, r1
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <HAL_RCC_OscConfig+0x630>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	0019      	movs	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	431a      	orrs	r2, r3
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0449      	lsls	r1, r1, #17
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fac5 	bl	8000684 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fac0 	bl	8000684 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e047      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	049b      	lsls	r3, r3, #18
 800111a:	4013      	ands	r3, r2
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x574>
 800111e:	e03f      	b.n	80011a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001126:	4924      	ldr	r1, [pc, #144]	; (80011b8 <HAL_RCC_OscConfig+0x62c>)
 8001128:	400a      	ands	r2, r1
 800112a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff faaa 	bl	8000684 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff faa5 	bl	8000684 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e02c      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	049b      	lsls	r3, r3, #18
 8001150:	4013      	ands	r3, r2
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x5aa>
 8001154:	e024      	b.n	80011a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e01f      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_RCC_OscConfig+0x620>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	025b      	lsls	r3, r3, #9
 8001174:	401a      	ands	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	429a      	cmp	r2, r3
 800117c:	d10e      	bne.n	800119c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	220f      	movs	r2, #15
 8001182:	401a      	ands	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001188:	429a      	cmp	r2, r3
 800118a:	d107      	bne.n	800119c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	23f0      	movs	r3, #240	; 0xf0
 8001190:	039b      	lsls	r3, r3, #14
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b008      	add	sp, #32
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000
 80011b0:	00001388 	.word	0x00001388
 80011b4:	efffffff 	.word	0xefffffff
 80011b8:	feffffff 	.word	0xfeffffff
 80011bc:	ffc2ffff 	.word	0xffc2ffff

080011c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0b3      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	4013      	ands	r3, r2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d911      	bls.n	8001206 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4393      	bics	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d001      	beq.n	8001206 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e09a      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d015      	beq.n	800123c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2204      	movs	r2, #4
 8001216:	4013      	ands	r3, r2
 8001218:	d006      	beq.n	8001228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800121a:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001220:	21e0      	movs	r1, #224	; 0xe0
 8001222:	00c9      	lsls	r1, r1, #3
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	22f0      	movs	r2, #240	; 0xf0
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	d040      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d114      	bne.n	8001284 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06e      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	049b      	lsls	r3, r3, #18
 800126e:	4013      	ands	r3, r2
 8001270:	d108      	bne.n	8001284 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e062      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e05b      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001298:	f7ff f9f4 	bl	8000684 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a2:	f7ff f9ef 	bl	8000684 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_RCC_ClockConfig+0x18c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e042      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	220c      	movs	r2, #12
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1ec      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4013      	ands	r3, r2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d211      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	4393      	bics	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_RCC_ClockConfig+0x184>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e020      	b.n	800133c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2204      	movs	r2, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d009      	beq.n	8001318 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_RCC_ClockConfig+0x190>)
 800130a:	4013      	ands	r3, r2
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001318:	f000 f820 	bl	800135c <HAL_RCC_GetSysClockFreq>
 800131c:	0001      	movs	r1, r0
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_RCC_ClockConfig+0x188>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	220f      	movs	r2, #15
 8001326:	4013      	ands	r3, r2
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_RCC_ClockConfig+0x194>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	000a      	movs	r2, r1
 800132e:	40da      	lsrs	r2, r3
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x198>)
 8001332:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff f8b7 	bl	80004a8 <HAL_InitTick>
  
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40022000 	.word	0x40022000
 8001348:	40021000 	.word	0x40021000
 800134c:	00001388 	.word	0x00001388
 8001350:	fffff8ff 	.word	0xfffff8ff
 8001354:	08002884 	.word	0x08002884
 8001358:	20000000 	.word	0x20000000

0800135c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08f      	sub	sp, #60	; 0x3c
 8001360:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001362:	2314      	movs	r3, #20
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001368:	ca13      	ldmia	r2!, {r0, r1, r4}
 800136a:	c313      	stmia	r3!, {r0, r1, r4}
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001374:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001376:	c313      	stmia	r3!, {r0, r1, r4}
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	220c      	movs	r2, #12
 800139a:	4013      	ands	r3, r2
 800139c:	2b04      	cmp	r3, #4
 800139e:	d002      	beq.n	80013a6 <HAL_RCC_GetSysClockFreq+0x4a>
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d003      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0x50>
 80013a4:	e02d      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013aa:	e02d      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	220f      	movs	r2, #15
 80013b2:	4013      	ands	r3, r2
 80013b4:	2214      	movs	r2, #20
 80013b6:	18ba      	adds	r2, r7, r2
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_RCC_GetSysClockFreq+0xc0>)
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	220f      	movs	r2, #15
 80013c2:	4013      	ands	r3, r2
 80013c4:	1d3a      	adds	r2, r7, #4
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	4013      	ands	r3, r2
 80013d2:	d009      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013d8:	f7fe fe96 	bl	8000108 <__udivsi3>
 80013dc:	0003      	movs	r3, r0
 80013de:	001a      	movs	r2, r3
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	4353      	muls	r3, r2
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
 80013e6:	e009      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80013e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ea:	000a      	movs	r2, r1
 80013ec:	0152      	lsls	r2, r2, #5
 80013ee:	1a52      	subs	r2, r2, r1
 80013f0:	0193      	lsls	r3, r2, #6
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001400:	e002      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001406:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b00f      	add	sp, #60	; 0x3c
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	0800285c 	.word	0x0800285c
 8001418:	0800286c 	.word	0x0800286c
 800141c:	40021000 	.word	0x40021000
 8001420:	007a1200 	.word	0x007a1200

08001424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_RCC_GetHCLKFreq+0x10>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800143c:	f7ff fff2 	bl	8001424 <HAL_RCC_GetHCLKFreq>
 8001440:	0001      	movs	r1, r0
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	2207      	movs	r2, #7
 800144a:	4013      	ands	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	40d9      	lsrs	r1, r3
 8001452:	000b      	movs	r3, r1
}    
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000
 8001460:	08002894 	.word	0x08002894

08001464 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_RCC_GetClockConfig+0x4c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_GetClockConfig+0x4c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	22f0      	movs	r2, #240	; 0xf0
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_RCC_GetClockConfig+0x4c>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	23e0      	movs	r3, #224	; 0xe0
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	401a      	ands	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_GetClockConfig+0x50>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	401a      	ands	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e01e      	b.n	8001508 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	223d      	movs	r2, #61	; 0x3d
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	223c      	movs	r2, #60	; 0x3c
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f000 f815 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	223d      	movs	r2, #61	; 0x3d
 80014ea:	2102      	movs	r1, #2
 80014ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	0019      	movs	r1, r3
 80014f8:	0010      	movs	r0, r2
 80014fa:	f000 f969 	bl	80017d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	223d      	movs	r2, #61	; 0x3d
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2207      	movs	r2, #7
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d007      	beq.n	800155a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d124      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	2b02      	cmp	r3, #2
 8001586:	d11d      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2203      	movs	r2, #3
 800158e:	4252      	negs	r2, r2
 8001590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2203      	movs	r2, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	d004      	beq.n	80015ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f8fa 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 80015ac:	e007      	b.n	80015be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f8ed 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 f8f9 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2204      	movs	r2, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d125      	bne.n	800161e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d11e      	bne.n	800161e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2205      	movs	r2, #5
 80015e6:	4252      	negs	r2, r2
 80015e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	23c0      	movs	r3, #192	; 0xc0
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d004      	beq.n	8001608 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f000 f8cd 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 8001606:	e007      	b.n	8001618 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f8c0 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f8cc 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2208      	movs	r2, #8
 8001626:	4013      	ands	r3, r2
 8001628:	2b08      	cmp	r3, #8
 800162a:	d124      	bne.n	8001676 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2208      	movs	r2, #8
 8001634:	4013      	ands	r3, r2
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11d      	bne.n	8001676 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2209      	movs	r2, #9
 8001640:	4252      	negs	r2, r2
 8001642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2203      	movs	r2, #3
 8001652:	4013      	ands	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	f000 f8a1 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 800165e:	e007      	b.n	8001670 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0018      	movs	r0, r3
 8001664:	f000 f894 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f8a0 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	2210      	movs	r2, #16
 800167e:	4013      	ands	r3, r2
 8001680:	2b10      	cmp	r3, #16
 8001682:	d125      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2210      	movs	r2, #16
 800168c:	4013      	ands	r3, r2
 800168e:	2b10      	cmp	r3, #16
 8001690:	d11e      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2211      	movs	r2, #17
 8001698:	4252      	negs	r2, r2
 800169a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2208      	movs	r2, #8
 80016a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d004      	beq.n	80016ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 f874 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 80016b8:	e007      	b.n	80016ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f867 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f873 	bl	80017b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10f      	bne.n	80016fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4252      	negs	r2, r2
 80016f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fe93 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	4013      	ands	r3, r2
 8001708:	2b80      	cmp	r3, #128	; 0x80
 800170a:	d10f      	bne.n	800172c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	4013      	ands	r3, r2
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	d108      	bne.n	800172c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2281      	movs	r2, #129	; 0x81
 8001720:	4252      	negs	r2, r2
 8001722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f8da 	bl	80018e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	4013      	ands	r3, r2
 8001736:	2b40      	cmp	r3, #64	; 0x40
 8001738:	d10f      	bne.n	800175a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	4013      	ands	r3, r2
 8001744:	2b40      	cmp	r3, #64	; 0x40
 8001746:	d108      	bne.n	800175a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	4252      	negs	r2, r2
 8001750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f000 f833 	bl	80017c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2220      	movs	r2, #32
 8001762:	4013      	ands	r3, r2
 8001764:	2b20      	cmp	r3, #32
 8001766:	d10f      	bne.n	8001788 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	4013      	ands	r3, r2
 8001772:	2b20      	cmp	r3, #32
 8001774:	d108      	bne.n	8001788 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2221      	movs	r2, #33	; 0x21
 800177c:	4252      	negs	r2, r2
 800177e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0018      	movs	r0, r3
 8001784:	f000 f8a4 	bl	80018d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d008      	beq.n	80017fa <TIM_Base_SetConfig+0x2a>
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d003      	beq.n	80017fa <TIM_Base_SetConfig+0x2a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <TIM_Base_SetConfig+0xe8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d108      	bne.n	800180c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2270      	movs	r2, #112	; 0x70
 80017fe:	4393      	bics	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d018      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d013      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <TIM_Base_SetConfig+0xe8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00f      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <TIM_Base_SetConfig+0xec>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00b      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <TIM_Base_SetConfig+0xf0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <TIM_Base_SetConfig+0xf4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d003      	beq.n	8001846 <TIM_Base_SetConfig+0x76>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <TIM_Base_SetConfig+0xf8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d108      	bne.n	8001858 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <TIM_Base_SetConfig+0xfc>)
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	4393      	bics	r3, r2
 800185e:	001a      	movs	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00b      	beq.n	800189e <TIM_Base_SetConfig+0xce>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <TIM_Base_SetConfig+0xf0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <TIM_Base_SetConfig+0xce>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <TIM_Base_SetConfig+0xf4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <TIM_Base_SetConfig+0xce>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <TIM_Base_SetConfig+0xf8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d103      	bne.n	80018a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	615a      	str	r2, [r3, #20]
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40002000 	.word	0x40002000
 80018c0:	40014000 	.word	0x40014000
 80018c4:	40014400 	.word	0x40014400
 80018c8:	40014800 	.word	0x40014800
 80018cc:	fffffcff 	.word	0xfffffcff

080018d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3308      	adds	r3, #8
 80018fc:	001a      	movs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	4252      	negs	r2, r2
 8001908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3308      	adds	r3, #8
 800190e:	001a      	movs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3308      	adds	r3, #8
 8001918:	001a      	movs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}

08001942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}

08001986 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6892      	ldr	r2, [r2, #8]
 800199c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6852      	ldr	r2, [r2, #4]
 80019a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d103      	bne.n	80019ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b004      	add	sp, #16
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80019d6:	b590      	push	{r4, r7, lr}
 80019d8:	b08d      	sub	sp, #52	; 0x34
 80019da:	af04      	add	r7, sp, #16
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <xTaskCreateStatic+0x18>
 80019ea:	b672      	cpsid	i
 80019ec:	e7fe      	b.n	80019ec <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <xTaskCreateStatic+0x22>
 80019f4:	b672      	cpsid	i
 80019f6:	e7fe      	b.n	80019f6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80019f8:	2354      	movs	r3, #84	; 0x54
 80019fa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b54      	cmp	r3, #84	; 0x54
 8001a00:	d001      	beq.n	8001a06 <xTaskCreateStatic+0x30>
 8001a02:	b672      	cpsid	i
 8001a04:	e7fe      	b.n	8001a04 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <xTaskCreateStatic+0x78>
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01d      	beq.n	8001a4e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2251      	movs	r2, #81	; 0x51
 8001a20:	2102      	movs	r1, #2
 8001a22:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a24:	683c      	ldr	r4, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2318      	movs	r3, #24
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	0023      	movs	r3, r4
 8001a40:	f000 f858 	bl	8001af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 f8ce 	bl	8001be8 <prvAddNewTaskToReadyList>
 8001a4c:	e001      	b.n	8001a52 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a52:	69bb      	ldr	r3, [r7, #24]
	}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b009      	add	sp, #36	; 0x24
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b08d      	sub	sp, #52	; 0x34
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a6c:	1dbb      	adds	r3, r7, #6
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fd0c 	bl	8002490 <pvPortMalloc>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a82:	2054      	movs	r0, #84	; 0x54
 8001a84:	f000 fd04 	bl	8002490 <pvPortMalloc>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
 8001a98:	e006      	b.n	8001aa8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fd9d 	bl	80025dc <vPortFree>
 8001aa2:	e001      	b.n	8001aa8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01a      	beq.n	8001ae4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2251      	movs	r2, #81	; 0x51
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	683c      	ldr	r4, [r7, #0]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9303      	str	r3, [sp, #12]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	0023      	movs	r3, r4
 8001ad2:	f000 f80f 	bl	8001af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f885 	bl	8001be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	e002      	b.n	8001aea <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001aea:	69bb      	ldr	r3, [r7, #24]
	}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b009      	add	sp, #36	; 0x24
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4936      	ldr	r1, [pc, #216]	; (8001be4 <prvInitialiseNewTask+0xf0>)
 8001b0a:	468c      	mov	ip, r1
 8001b0c:	4463      	add	r3, ip
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2207      	movs	r2, #7
 8001b18:	4393      	bics	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2207      	movs	r2, #7
 8001b20:	4013      	ands	r3, r2
 8001b22:	d001      	beq.n	8001b28 <prvInitialiseNewTask+0x34>
 8001b24:	b672      	cpsid	i
 8001b26:	e7fe      	b.n	8001b26 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e013      	b.n	8001b56 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	7818      	ldrb	r0, [r3, #0]
 8001b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b38:	2134      	movs	r1, #52	; 0x34
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	185b      	adds	r3, r3, r1
 8001b40:	1c02      	adds	r2, r0, #0
 8001b42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d9e8      	bls.n	8001b2e <prvInitialiseNewTask+0x3a>
 8001b5c:	e000      	b.n	8001b60 <prvInitialiseNewTask+0x6c>
		{
			break;
 8001b5e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	2243      	movs	r2, #67	; 0x43
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d901      	bls.n	8001b72 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b6e:	2306      	movs	r3, #6
 8001b70:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	6a3a      	ldr	r2, [r7, #32]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2200      	movs	r2, #0
 8001b82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	3304      	adds	r3, #4
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff fecf 	bl	800192c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	3318      	adds	r3, #24
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff feca 	bl	800192c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	1ad2      	subs	r2, r2, r3
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2250      	movs	r2, #80	; 0x50
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fb2e 	bl	8002224 <pxPortInitialiseStack>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b006      	add	sp, #24
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	3fffffff 	.word	0x3fffffff

08001be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001bf0:	f000 fbb6 	bl	8002360 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001bf4:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <prvAddNewTaskToReadyList+0xb0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <prvAddNewTaskToReadyList+0xb0>)
 8001bfc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <prvAddNewTaskToReadyList+0xb4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <prvAddNewTaskToReadyList+0xb4>)
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <prvAddNewTaskToReadyList+0xb0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d110      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c14:	f000 fa48 	bl	80020a8 <prvInitialiseTaskLists>
 8001c18:	e00d      	b.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <prvAddNewTaskToReadyList+0xb8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <prvAddNewTaskToReadyList+0xb4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d802      	bhi.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <prvAddNewTaskToReadyList+0xb4>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <prvAddNewTaskToReadyList+0xbc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <prvAddNewTaskToReadyList+0xbc>)
 8001c3e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <prvAddNewTaskToReadyList+0xc0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d903      	bls.n	8001c54 <prvAddNewTaskToReadyList+0x6c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <prvAddNewTaskToReadyList+0xc0>)
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	0013      	movs	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <prvAddNewTaskToReadyList+0xc4>)
 8001c62:	189a      	adds	r2, r3, r2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	0019      	movs	r1, r3
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	f7ff fe69 	bl	8001942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c70:	f000 fb88 	bl	8002384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <prvAddNewTaskToReadyList+0xb8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <prvAddNewTaskToReadyList+0xb4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d201      	bcs.n	8001c8e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c8a:	f000 fb59 	bl	8002340 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	200003c4 	.word	0x200003c4
 8001c9c:	200002c4 	.word	0x200002c4
 8001ca0:	200003d0 	.word	0x200003d0
 8001ca4:	200003e0 	.word	0x200003e0
 8001ca8:	200003cc 	.word	0x200003cc
 8001cac:	200002c8 	.word	0x200002c8

08001cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001cbe:	003a      	movs	r2, r7
 8001cc0:	1d39      	adds	r1, r7, #4
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7fe faaa 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ccc:	683c      	ldr	r4, [r7, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4918      	ldr	r1, [pc, #96]	; (8001d34 <vTaskStartScheduler+0x84>)
 8001cd4:	4818      	ldr	r0, [pc, #96]	; (8001d38 <vTaskStartScheduler+0x88>)
 8001cd6:	9202      	str	r2, [sp, #8]
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	0022      	movs	r2, r4
 8001ce2:	f7ff fe78 	bl	80019d6 <xTaskCreateStatic>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <vTaskStartScheduler+0x8c>)
 8001cea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <vTaskStartScheduler+0x8c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e001      	b.n	8001cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10d      	bne.n	8001d20 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001d04:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <vTaskStartScheduler+0x90>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4252      	negs	r2, r2
 8001d0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <vTaskStartScheduler+0x94>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <vTaskStartScheduler+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d1a:	f000 faed 	bl	80022f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d1e:	e004      	b.n	8001d2a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	d101      	bne.n	8001d2a <vTaskStartScheduler+0x7a>
 8001d26:	b672      	cpsid	i
 8001d28:	e7fe      	b.n	8001d28 <vTaskStartScheduler+0x78>
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b005      	add	sp, #20
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	0800287c 	.word	0x0800287c
 8001d38:	08002089 	.word	0x08002089
 8001d3c:	200003e8 	.word	0x200003e8
 8001d40:	200003e4 	.word	0x200003e4
 8001d44:	200003d0 	.word	0x200003d0
 8001d48:	200003c8 	.word	0x200003c8

08001d4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <vTaskSuspendAll+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <vTaskSuspendAll+0x14>)
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200003ec 	.word	0x200003ec

08001d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d72:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <xTaskResumeAll+0xf8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <xTaskResumeAll+0x1a>
 8001d7a:	b672      	cpsid	i
 8001d7c:	e7fe      	b.n	8001d7c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d7e:	f000 faef 	bl	8002360 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <xTaskResumeAll+0xf8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <xTaskResumeAll+0xf8>)
 8001d8a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <xTaskResumeAll+0xf8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d15b      	bne.n	8001e4c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <xTaskResumeAll+0xfc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d057      	beq.n	8001e4c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d9c:	e02f      	b.n	8001dfe <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <xTaskResumeAll+0x100>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3318      	adds	r3, #24
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff fdeb 	bl	8001986 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3304      	adds	r3, #4
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fde6 	bl	8001986 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <xTaskResumeAll+0x104>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d903      	bls.n	8001dce <xTaskResumeAll+0x6a>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dca:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <xTaskResumeAll+0x104>)
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	189b      	adds	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <xTaskResumeAll+0x108>)
 8001ddc:	189a      	adds	r2, r3, r2
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3304      	adds	r3, #4
 8001de2:	0019      	movs	r1, r3
 8001de4:	0010      	movs	r0, r2
 8001de6:	f7ff fdac 	bl	8001942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <xTaskResumeAll+0x10c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d302      	bcc.n	8001dfe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <xTaskResumeAll+0x110>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <xTaskResumeAll+0x100>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1cb      	bne.n	8001d9e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e0c:	f000 f9e6 	bl	80021dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <xTaskResumeAll+0x114>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00f      	beq.n	8001e3c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e1c:	f000 f82e 	bl	8001e7c <xTaskIncrementTick>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d002      	beq.n	8001e2a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <xTaskResumeAll+0x110>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f2      	bne.n	8001e1c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <xTaskResumeAll+0x114>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <xTaskResumeAll+0x110>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e44:	2301      	movs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e48:	f000 fa7a 	bl	8002340 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e4c:	f000 fa9a 	bl	8002384 <vPortExitCritical>

	return xAlreadyYielded;
 8001e50:	68bb      	ldr	r3, [r7, #8]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	200003ec 	.word	0x200003ec
 8001e60:	200003c4 	.word	0x200003c4
 8001e64:	20000384 	.word	0x20000384
 8001e68:	200003cc 	.word	0x200003cc
 8001e6c:	200002c8 	.word	0x200002c8
 8001e70:	200002c4 	.word	0x200002c4
 8001e74:	200003d8 	.word	0x200003d8
 8001e78:	200003d4 	.word	0x200003d4

08001e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <xTaskIncrementTick+0x13c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d000      	beq.n	8001e90 <xTaskIncrementTick+0x14>
 8001e8e:	e083      	b.n	8001f98 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <xTaskIncrementTick+0x140>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <xTaskIncrementTick+0x140>)
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d117      	bne.n	8001ed4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <xTaskIncrementTick+0x144>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <xTaskIncrementTick+0x36>
 8001eae:	b672      	cpsid	i
 8001eb0:	e7fe      	b.n	8001eb0 <xTaskIncrementTick+0x34>
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <xTaskIncrementTick+0x144>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <xTaskIncrementTick+0x148>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <xTaskIncrementTick+0x144>)
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <xTaskIncrementTick+0x148>)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <xTaskIncrementTick+0x14c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <xTaskIncrementTick+0x14c>)
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f000 f984 	bl	80021dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <xTaskIncrementTick+0x150>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d34e      	bcc.n	8001f7c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <xTaskIncrementTick+0x144>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <xTaskIncrementTick+0x70>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <xTaskIncrementTick+0x72>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <xTaskIncrementTick+0x150>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4252      	negs	r2, r2
 8001ef8:	601a      	str	r2, [r3, #0]
					break;
 8001efa:	e03f      	b.n	8001f7c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001efc:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <xTaskIncrementTick+0x144>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d203      	bcs.n	8001f1c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <xTaskIncrementTick+0x150>)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
						break;
 8001f1a:	e02f      	b.n	8001f7c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fd30 	bl	8001986 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3318      	adds	r3, #24
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff fd27 	bl	8001986 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <xTaskIncrementTick+0x154>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d903      	bls.n	8001f4c <xTaskIncrementTick+0xd0>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <xTaskIncrementTick+0x154>)
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	0013      	movs	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	189b      	adds	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <xTaskIncrementTick+0x158>)
 8001f5a:	189a      	adds	r2, r3, r2
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	0019      	movs	r1, r3
 8001f62:	0010      	movs	r0, r2
 8001f64:	f7ff fced 	bl	8001942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <xTaskIncrementTick+0x15c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3b3      	bcc.n	8001ede <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f7a:	e7b0      	b.n	8001ede <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <xTaskIncrementTick+0x15c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f82:	4914      	ldr	r1, [pc, #80]	; (8001fd4 <xTaskIncrementTick+0x158>)
 8001f84:	0013      	movs	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	585b      	ldr	r3, [r3, r1]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d907      	bls.n	8001fa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e004      	b.n	8001fa2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <xTaskIncrementTick+0x160>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <xTaskIncrementTick+0x160>)
 8001fa0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <xTaskIncrementTick+0x164>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fae:	697b      	ldr	r3, [r7, #20]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b006      	add	sp, #24
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200003ec 	.word	0x200003ec
 8001fbc:	200003c8 	.word	0x200003c8
 8001fc0:	2000037c 	.word	0x2000037c
 8001fc4:	20000380 	.word	0x20000380
 8001fc8:	200003dc 	.word	0x200003dc
 8001fcc:	200003e4 	.word	0x200003e4
 8001fd0:	200003cc 	.word	0x200003cc
 8001fd4:	200002c8 	.word	0x200002c8
 8001fd8:	200002c4 	.word	0x200002c4
 8001fdc:	200003d4 	.word	0x200003d4
 8001fe0:	200003d8 	.word	0x200003d8

08001fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <vTaskSwitchContext+0x90>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <vTaskSwitchContext+0x94>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ff8:	e037      	b.n	800206a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <vTaskSwitchContext+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <vTaskSwitchContext+0x98>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	e007      	b.n	8002018 <vTaskSwitchContext+0x34>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <vTaskSwitchContext+0x2e>
 800200e:	b672      	cpsid	i
 8002010:	e7fe      	b.n	8002010 <vTaskSwitchContext+0x2c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3b01      	subs	r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	4919      	ldr	r1, [pc, #100]	; (8002080 <vTaskSwitchContext+0x9c>)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	0013      	movs	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	189b      	adds	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	585b      	ldr	r3, [r3, r1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ee      	beq.n	8002008 <vTaskSwitchContext+0x24>
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	0013      	movs	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	189b      	adds	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <vTaskSwitchContext+0x9c>)
 8002036:	189b      	adds	r3, r3, r2
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3308      	adds	r3, #8
 800204c:	429a      	cmp	r2, r3
 800204e:	d104      	bne.n	800205a <vTaskSwitchContext+0x76>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <vTaskSwitchContext+0xa0>)
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <vTaskSwitchContext+0x98>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	200003ec 	.word	0x200003ec
 8002078:	200003d8 	.word	0x200003d8
 800207c:	200003cc 	.word	0x200003cc
 8002080:	200002c8 	.word	0x200002c8
 8002084:	200002c4 	.word	0x200002c4

08002088 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002090:	f000 f84e 	bl	8002130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <prvIdleTask+0x1c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d9f9      	bls.n	8002090 <prvIdleTask+0x8>
			{
				taskYIELD();
 800209c:	f000 f950 	bl	8002340 <vPortYield>
		prvCheckTasksWaitingTermination();
 80020a0:	e7f6      	b.n	8002090 <prvIdleTask+0x8>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	200002c8 	.word	0x200002c8

080020a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	e00c      	b.n	80020ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	0013      	movs	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	189b      	adds	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <prvInitialiseTaskLists+0x68>)
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff fc14 	bl	80018f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3301      	adds	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d9ef      	bls.n	80020b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <prvInitialiseTaskLists+0x6c>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff fc0a 	bl	80018f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <prvInitialiseTaskLists+0x70>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff fc06 	bl	80018f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <prvInitialiseTaskLists+0x74>)
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fc02 	bl	80018f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <prvInitialiseTaskLists+0x78>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fbfe 	bl	80018f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <prvInitialiseTaskLists+0x7c>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fbfa 	bl	80018f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <prvInitialiseTaskLists+0x80>)
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <prvInitialiseTaskLists+0x6c>)
 8002100:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <prvInitialiseTaskLists+0x84>)
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <prvInitialiseTaskLists+0x70>)
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200002c8 	.word	0x200002c8
 8002114:	20000354 	.word	0x20000354
 8002118:	20000368 	.word	0x20000368
 800211c:	20000384 	.word	0x20000384
 8002120:	20000398 	.word	0x20000398
 8002124:	200003b0 	.word	0x200003b0
 8002128:	2000037c 	.word	0x2000037c
 800212c:	20000380 	.word	0x20000380

08002130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002136:	e01a      	b.n	800216e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002138:	f000 f912 	bl	8002360 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <prvCheckTasksWaitingTermination+0x50>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fc1c 	bl	8001986 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <prvCheckTasksWaitingTermination+0x54>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <prvCheckTasksWaitingTermination+0x54>)
 8002156:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <prvCheckTasksWaitingTermination+0x58>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <prvCheckTasksWaitingTermination+0x58>)
 8002160:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002162:	f000 f90f 	bl	8002384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f80f 	bl	800218c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <prvCheckTasksWaitingTermination+0x58>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1e0      	bne.n	8002138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000398 	.word	0x20000398
 8002184:	200003c4 	.word	0x200003c4
 8002188:	200003ac 	.word	0x200003ac

0800218c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2251      	movs	r2, #81	; 0x51
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fa1a 	bl	80025dc <vPortFree>
				vPortFree( pxTCB );
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fa16 	bl	80025dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80021b0:	e010      	b.n	80021d4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2251      	movs	r2, #81	; 0x51
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d104      	bne.n	80021c6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 fa0c 	bl	80025dc <vPortFree>
	}
 80021c4:	e006      	b.n	80021d4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2251      	movs	r2, #81	; 0x51
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d001      	beq.n	80021d4 <prvDeleteTCB+0x48>
 80021d0:	b672      	cpsid	i
 80021d2:	e7fe      	b.n	80021d2 <prvDeleteTCB+0x46>
	}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <prvResetNextTaskUnblockTime+0x40>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <prvResetNextTaskUnblockTime+0x14>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <prvResetNextTaskUnblockTime+0x16>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <prvResetNextTaskUnblockTime+0x44>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	4252      	negs	r2, r2
 80021fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80021fe:	e008      	b.n	8002212 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <prvResetNextTaskUnblockTime+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <prvResetNextTaskUnblockTime+0x44>)
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	2000037c 	.word	0x2000037c
 8002220:	200003e4 	.word	0x200003e4

08002224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b04      	subs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	0452      	lsls	r2, r2, #17
 800223c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3b04      	subs	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3b04      	subs	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002250:	4a08      	ldr	r2, [pc, #32]	; (8002274 <pxPortInitialiseStack+0x50>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b14      	subs	r3, #20
 800225a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b20      	subs	r3, #32
 8002266:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	08002279 	.word	0x08002279

08002278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <prvTaskExitError+0x2c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	d001      	beq.n	800228e <prvTaskExitError+0x16>
 800228a:	b672      	cpsid	i
 800228c:	e7fe      	b.n	800228c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800228e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0fc      	beq.n	8002292 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	2000000c 	.word	0x2000000c

080022a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <pxCurrentTCBConst2>)
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	3020      	adds	r0, #32
 80022c8:	f380 8809 	msr	PSP, r0
 80022cc:	2002      	movs	r0, #2
 80022ce:	f380 8814 	msr	CONTROL, r0
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80022d8:	46ae      	mov	lr, r5
 80022da:	bc08      	pop	{r3}
 80022dc:	bc04      	pop	{r2}
 80022de:	b662      	cpsie	i
 80022e0:	4718      	bx	r3
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46c0      	nop			; (mov r8, r8)

080022f0 <pxCurrentTCBConst2>:
 80022f0:	200002c4 	.word	0x200002c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46c0      	nop			; (mov r8, r8)

080022f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <xPortStartScheduler+0x40>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <xPortStartScheduler+0x40>)
 8002302:	21ff      	movs	r1, #255	; 0xff
 8002304:	0409      	lsls	r1, r1, #16
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <xPortStartScheduler+0x40>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <xPortStartScheduler+0x40>)
 8002310:	21ff      	movs	r1, #255	; 0xff
 8002312:	0609      	lsls	r1, r1, #24
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002318:	f000 f898 	bl	800244c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <xPortStartScheduler+0x44>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002322:	f7ff ffcd 	bl	80022c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002326:	f7ff fe5d 	bl	8001fe4 <vTaskSwitchContext>
	prvTaskExitError();
 800232a:	f7ff ffa5 	bl	8002278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	e000ed20 	.word	0xe000ed20
 800233c:	2000000c 	.word	0x2000000c

08002340 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <vPortYield+0x1c>)
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	0552      	lsls	r2, r2, #21
 800234a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800234c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002350:	f3bf 8f6f 	isb	sy
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002364:	b672      	cpsid	i
    uxCriticalNesting++;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <vPortEnterCritical+0x20>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <vPortEnterCritical+0x20>)
 800236e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002370:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002374:	f3bf 8f6f 	isb	sy
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	2000000c 	.word	0x2000000c

08002384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <vPortExitCritical+0x2c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <vPortExitCritical+0x10>
 8002390:	b672      	cpsid	i
 8002392:	e7fe      	b.n	8002392 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <vPortExitCritical+0x2c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <vPortExitCritical+0x2c>)
 800239c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <vPortExitCritical+0x2c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80023a6:	b662      	cpsie	i
    }
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80023b4:	f3ef 8010 	mrs	r0, PRIMASK
 80023b8:	b672      	cpsid	i
 80023ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	0018      	movs	r0, r3

080023c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80023c0:	f380 8810 	msr	PRIMASK, r0
 80023c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80023c6:	46c0      	nop			; (mov r8, r8)
	...

080023d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80023d0:	f3ef 8009 	mrs	r0, PSP
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <pxCurrentTCBConst>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	3820      	subs	r0, #32
 80023da:	6010      	str	r0, [r2, #0]
 80023dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80023de:	4644      	mov	r4, r8
 80023e0:	464d      	mov	r5, r9
 80023e2:	4656      	mov	r6, sl
 80023e4:	465f      	mov	r7, fp
 80023e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80023e8:	b508      	push	{r3, lr}
 80023ea:	b672      	cpsid	i
 80023ec:	f7ff fdfa 	bl	8001fe4 <vTaskSwitchContext>
 80023f0:	b662      	cpsie	i
 80023f2:	bc0c      	pop	{r2, r3}
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	6808      	ldr	r0, [r1, #0]
 80023f8:	3010      	adds	r0, #16
 80023fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80023fc:	46a0      	mov	r8, r4
 80023fe:	46a9      	mov	r9, r5
 8002400:	46b2      	mov	sl, r6
 8002402:	46bb      	mov	fp, r7
 8002404:	f380 8809 	msr	PSP, r0
 8002408:	3820      	subs	r0, #32
 800240a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800240c:	4718      	bx	r3
 800240e:	46c0      	nop			; (mov r8, r8)

08002410 <pxCurrentTCBConst>:
 8002410:	200002c4 	.word	0x200002c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46c0      	nop			; (mov r8, r8)

08002418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800241e:	f7ff ffc9 	bl	80023b4 <ulSetInterruptMaskFromISR>
 8002422:	0003      	movs	r3, r0
 8002424:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002426:	f7ff fd29 	bl	8001e7c <xTaskIncrementTick>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d003      	beq.n	8002436 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SysTick_Handler+0x30>)
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	0552      	lsls	r2, r2, #21
 8002434:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ffc1 	bl	80023c0 <vClearInterruptMaskFromISR>
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <prvSetupTimerInterrupt+0x34>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <prvSetupTimerInterrupt+0x38>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <prvSetupTimerInterrupt+0x3c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	22fa      	movs	r2, #250	; 0xfa
 8002462:	0091      	lsls	r1, r2, #2
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd fe4f 	bl	8000108 <__udivsi3>
 800246a:	0003      	movs	r3, r0
 800246c:	001a      	movs	r2, r3
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <prvSetupTimerInterrupt+0x40>)
 8002470:	3a01      	subs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <prvSetupTimerInterrupt+0x34>)
 8002476:	2207      	movs	r2, #7
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e000e010 	.word	0xe000e010
 8002484:	e000e018 	.word	0xe000e018
 8002488:	20000000 	.word	0x20000000
 800248c:	e000e014 	.word	0xe000e014

08002490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800249c:	f7ff fc56 	bl	8001d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80024a0:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <pvPortMalloc+0x138>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80024a8:	f000 f8e0 	bl	800266c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <pvPortMalloc+0x13c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4013      	ands	r3, r2
 80024b4:	d000      	beq.n	80024b8 <pvPortMalloc+0x28>
 80024b6:	e079      	b.n	80025ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d012      	beq.n	80024e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80024be:	2208      	movs	r2, #8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	189b      	adds	r3, r3, r2
 80024c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2207      	movs	r2, #7
 80024ca:	4013      	ands	r3, r2
 80024cc:	d00a      	beq.n	80024e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2207      	movs	r2, #7
 80024d2:	4393      	bics	r3, r2
 80024d4:	3308      	adds	r3, #8
 80024d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2207      	movs	r2, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	d001      	beq.n	80024e4 <pvPortMalloc+0x54>
 80024e0:	b672      	cpsid	i
 80024e2:	e7fe      	b.n	80024e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d060      	beq.n	80025ac <pvPortMalloc+0x11c>
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <pvPortMalloc+0x140>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d85b      	bhi.n	80025ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024f4:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <pvPortMalloc+0x144>)
 80024f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <pvPortMalloc+0x144>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024fe:	e004      	b.n	800250a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	d903      	bls.n	800251c <pvPortMalloc+0x8c>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f1      	bne.n	8002500 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <pvPortMalloc+0x138>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d042      	beq.n	80025ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	189b      	adds	r3, r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	2308      	movs	r3, #8
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	429a      	cmp	r2, r3
 8002546:	d916      	bls.n	8002576 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	18d3      	adds	r3, r2, r3
 800254e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	d001      	beq.n	800255c <pvPortMalloc+0xcc>
 8002558:	b672      	cpsid	i
 800255a:	e7fe      	b.n	800255a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 f8db 	bl	800272c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <pvPortMalloc+0x140>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <pvPortMalloc+0x140>)
 8002582:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <pvPortMalloc+0x140>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <pvPortMalloc+0x148>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d203      	bcs.n	8002598 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <pvPortMalloc+0x140>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <pvPortMalloc+0x148>)
 8002596:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <pvPortMalloc+0x13c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80025ac:	f7ff fbda 	bl	8001d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	d001      	beq.n	80025bc <pvPortMalloc+0x12c>
 80025b8:	b672      	cpsid	i
 80025ba:	e7fe      	b.n	80025ba <pvPortMalloc+0x12a>
	return pvReturn;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b006      	add	sp, #24
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000ff8 	.word	0x20000ff8
 80025cc:	20001004 	.word	0x20001004
 80025d0:	20000ffc 	.word	0x20000ffc
 80025d4:	20000ff0 	.word	0x20000ff0
 80025d8:	20001000 	.word	0x20001000

080025dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d035      	beq.n	800265a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025ee:	2308      	movs	r3, #8
 80025f0:	425b      	negs	r3, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <vPortFree+0x88>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4013      	ands	r3, r2
 8002606:	d101      	bne.n	800260c <vPortFree+0x30>
 8002608:	b672      	cpsid	i
 800260a:	e7fe      	b.n	800260a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <vPortFree+0x3c>
 8002614:	b672      	cpsid	i
 8002616:	e7fe      	b.n	8002616 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <vPortFree+0x88>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4013      	ands	r3, r2
 8002622:	d01a      	beq.n	800265a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d116      	bne.n	800265a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <vPortFree+0x88>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800263c:	f7ff fb86 	bl	8001d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <vPortFree+0x8c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	18d2      	adds	r2, r2, r3
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <vPortFree+0x8c>)
 800264c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f86b 	bl	800272c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002656:	f7ff fb85 	bl	8001d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	20001004 	.word	0x20001004
 8002668:	20000ffc 	.word	0x20000ffc

0800266c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <prvHeapInit+0xa8>)
 800267a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2207      	movs	r2, #7
 8002680:	4013      	ands	r3, r2
 8002682:	d00c      	beq.n	800269e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3307      	adds	r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2207      	movs	r2, #7
 800268e:	4393      	bics	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad2      	subs	r2, r2, r3
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <prvHeapInit+0xa8>)
 800269a:	18d3      	adds	r3, r2, r3
 800269c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <prvHeapInit+0xac>)
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <prvHeapInit+0xac>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80026b6:	2208      	movs	r2, #8
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2207      	movs	r2, #7
 80026c2:	4393      	bics	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <prvHeapInit+0xb0>)
 80026ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <prvHeapInit+0xb0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <prvHeapInit+0xb0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	1ad2      	subs	r2, r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <prvHeapInit+0xb0>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <prvHeapInit+0xb4>)
 80026f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <prvHeapInit+0xb8>)
 8002700:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <prvHeapInit+0xbc>)
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0612      	lsls	r2, r2, #24
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	200003f0 	.word	0x200003f0
 8002718:	20000ff0 	.word	0x20000ff0
 800271c:	20000ff8 	.word	0x20000ff8
 8002720:	20001000 	.word	0x20001000
 8002724:	20000ffc 	.word	0x20000ffc
 8002728:	20001004 	.word	0x20001004

0800272c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <prvInsertBlockIntoFreeList+0xa8>)
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e002      	b.n	8002740 <prvInsertBlockIntoFreeList+0x14>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d8f7      	bhi.n	800273a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d108      	bne.n	800276e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	18d2      	adds	r2, r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d118      	bne.n	80027b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <prvInsertBlockIntoFreeList+0xac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d00d      	beq.n	80027aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	18d2      	adds	r2, r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e008      	b.n	80027bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <prvInsertBlockIntoFreeList+0xac>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e003      	b.n	80027bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d002      	beq.n	80027ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	20000ff0 	.word	0x20000ff0
 80027d8:	20000ff8 	.word	0x20000ff8

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	2600      	movs	r6, #0
 80027e0:	4d0c      	ldr	r5, [pc, #48]	; (8002814 <__libc_init_array+0x38>)
 80027e2:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	2600      	movs	r6, #0
 80027ee:	f000 f821 	bl	8002834 <_init>
 80027f2:	4d0a      	ldr	r5, [pc, #40]	; (800281c <__libc_init_array+0x40>)
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x44>)
 80027f6:	1b64      	subs	r4, r4, r5
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	00b3      	lsls	r3, r6, #2
 8002802:	58eb      	ldr	r3, [r5, r3]
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	00b3      	lsls	r3, r6, #2
 800280c:	58eb      	ldr	r3, [r5, r3]
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	0800289c 	.word	0x0800289c
 8002818:	0800289c 	.word	0x0800289c
 800281c:	0800289c 	.word	0x0800289c
 8002820:	080028a0 	.word	0x080028a0

08002824 <memset>:
 8002824:	0003      	movs	r3, r0
 8002826:	1882      	adds	r2, r0, r2
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	7019      	strb	r1, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <_init>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr

08002840 <_fini>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr
